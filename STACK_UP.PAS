Program Stack_Up;
uses graph,crt,drivers,dos;
{$L egavga.obj}
{$L trip.obj}
type   koordinaadid=record
       x:integer;
       y:integer;
       end;
     proov=array[1..18,1..18] of integer;
     vou=record
               nimi:string[10];
               summa:longint;
     end;
const
korrus:array[1..20,1..19,1..10] of integer=
((
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0)),
(                      {Level II}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(3,4,0,0,0,0,0,0,4,3),
(5,1,0,0,0,0,0,0,1,5),
(2,3,0,0,0,0,0,0,3,2),
(4,5,0,0,0,0,0,0,5,4),
(1,2,0,0,0,0,0,0,2,1),
(3,4,0,0,0,0,0,0,4,3),
(5,1,0,0,0,0,0,0,1,5),
(2,3,2,2,1,1,2,2,3,2),
(4,5,4,4,3,3,4,4,5,4)),
(                      {Level III}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,4,4,0,0,0,0),
(0,0,0,3,2,3,2,0,0,0),
(0,0,5,1,5,1,5,1,0,0),
(0,3,4,3,4,3,4,3,4,0),
(1,2,1,2,1,2,1,2,1,2)),
(                       {Level IV}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(3,3,0,0,0,0,0,0,3,3),
(3,4,0,0,5,5,0,0,4,5),
(1,2,0,0,4,4,0,0,2,3),
(3,3,0,0,3,3,0,0,3,3),
(3,4,0,0,2,2,0,0,4,5),
(1,2,0,0,1,1,0,0,2,3)),
(                       {Level V}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(3,4,3,4,3,4,3,4,3,4),
(2,1,2,1,2,1,2,1,2,1),
(5,3,5,3,5,3,5,3,5,3),
(4,1,4,1,4,1,4,1,4,1),
(2,3,2,3,2,3,2,3,2,3),
(5,4,5,4,5,4,5,4,5,4)),
(                      {Level VI}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,5),
(0,0,0,0,0,0,0,0,1,2),
(0,0,0,0,0,0,0,5,4,3),
(0,0,0,0,0,0,1,2,1,4),
(0,0,0,0,0,5,4,3,2,1),
(0,0,0,0,1,2,1,4,5,1),
(0,0,0,5,4,3,2,1,5,4),
(0,0,1,2,1,4,5,1,2,3),
(0,5,4,3,2,1,5,4,1,2),
(1,2,1,4,5,1,2,3,4,5)),
(                      {Level VII}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(1,0,4,0,1,2,0,4,0,1),
(3,0,2,0,3,4,0,2,0,3),
(1,0,4,0,5,1,0,4,0,1),
(3,0,2,0,2,3,0,2,0,3),
(1,0,4,0,4,5,0,4,0,1),
(3,0,2,0,1,2,0,2,0,3),
(1,0,4,0,3,4,0,4,0,1),
(3,0,2,0,5,1,0,2,0,3),
(1,0,4,0,2,3,0,4,0,1)),
(                      {Level VIII}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(2,0,0,0,0,0,0,0,0,2),
(2,0,0,0,0,0,0,0,0,2),
(3,5,0,0,0,0,0,0,5,3),
(1,4,0,0,0,0,0,0,4,1),
(2,5,3,0,0,0,0,3,5,2),
(3,4,1,0,0,0,0,1,4,3),
(4,2,5,3,0,0,3,5,2,4),
(5,4,1,2,0,0,2,1,4,5),
(1,2,3,4,5,5,4,3,2,1)),
(                     {Level IX}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(1,0,0,0,5,5,0,0,0,1),
(5,2,0,4,1,1,4,0,2,5),
(4,1,3,5,2,2,5,3,1,4),
(3,5,2,4,3,3,4,2,5,3),
(2,4,1,3,4,4,3,1,4,2),
(1,3,5,2,5,5,2,5,3,1)),
(                      {Level X}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,1,1,0,0,0,0),
(0,0,0,0,5,5,0,0,0,0),
(0,0,0,0,1,1,0,0,0,0),
(0,0,0,0,5,5,0,0,0,0),
(0,0,0,0,1,1,0,0,0,0),
(0,0,0,0,5,5,0,0,0,0),
(4,0,0,0,1,1,0,0,0,4),
(1,3,0,0,5,5,0,0,3,1),
(2,2,4,0,1,1,0,4,2,2),
(1,2,1,3,5,5,3,1,2,1)),
(                        {Level XI}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,6,0,0,0,0,6,0,0),
(0,0,4,0,0,0,0,4,0,0),
(0,0,5,0,0,0,0,5,0,0),
(0,0,4,0,0,0,0,4,0,0),
(0,0,5,0,0,0,0,5,0,0),
(0,0,4,0,0,0,0,4,0,0),
(0,0,5,0,0,0,0,5,0,0),
(0,0,4,0,0,0,0,4,0,0),
(0,0,5,0,0,0,0,5,0,0),
(0,0,4,0,0,0,0,4,0,0),
(0,0,5,0,0,0,0,5,0,0),
(0,0,4,0,0,0,0,4,0,0),
(1,2,1,0,0,0,0,1,2,1),
(2,6,2,0,3,3,0,2,6,2),
(1,2,1,0,3,3,0,1,2,1)),
(                      {Level XII}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,6),
(0,0,0,0,0,0,0,0,5,4),
(5,0,0,0,0,0,0,6,4,3),
(1,6,0,0,0,0,5,3,4,3),
(2,1,5,0,0,6,3,4,3,4),
(2,1,2,6,5,4,3,4,3,4),
(1,2,1,2,4,3,4,3,4,3),
(1,2,1,2,1,3,4,3,4,3),
(2,1,2,1,2,1,3,4,3,4)),
(                      {Level XIII}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,3,0,0,0,0,0,0,3,0),
(0,4,0,0,0,0,0,0,4,0),
(0,3,0,0,0,0,0,0,3,0),
(0,4,0,0,0,0,0,0,4,0),
(0,3,0,0,0,0,0,0,3,0),
(0,4,0,0,0,0,0,0,4,0),
(0,3,0,0,0,0,0,0,3,0),
(0,4,0,0,0,0,0,0,4,0),
(0,3,0,0,0,0,0,0,3,0),
(0,4,0,0,3,3,0,0,4,0),
(0,3,0,1,2,2,1,0,3,0),
(0,4,5,4,5,4,5,5,4,0),
(1,3,1,3,5,5,3,1,3,1)),
(                        {Level XIV}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(1,0,5,0,2,0,5,0,2,0),
(2,0,3,0,3,0,3,0,3,0),
(1,0,2,0,2,0,2,0,5,0),
(2,3,1,5,3,1,3,1,4,2),
(4,5,2,4,2,4,5,2,5,1),
(1,3,5,2,2,4,5,3,2,1),
(2,5,3,4,3,1,3,1,3,5),
(1,4,2,5,2,4,2,4,5,1),
(2,3,1,5,3,1,3,1,4,2),
(4,5,2,4,2,4,5,2,5,1)),
(                       {Level XV}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,3,0),
(0,0,0,0,0,0,0,0,4,0),
(0,0,0,0,0,0,1,0,3,0),
(0,0,0,0,0,0,2,0,4,0),
(0,0,0,0,4,0,1,0,3,0),
(0,0,0,0,5,0,2,0,4,0),
(0,0,2,0,4,0,1,0,3,0),
(0,0,3,0,5,0,2,0,4,0),
(1,0,2,0,4,0,1,0,3,0)),
(                      {Level XVI}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(4,0,5,0,1,0,2,0,3,0),
(2,3,2,0,5,0,4,0,5,0),
(5,1,5,0,1,0,2,0,3,0),
(3,4,3,4,5,0,4,0,5,0),
(1,2,1,2,1,0,2,0,3,0),
(4,5,4,5,4,5,4,0,5,0),
(2,3,2,3,2,3,2,0,3,0),
(5,1,5,1,5,1,5,1,5,0),
(3,4,3,4,3,4,3,4,3,0),
(1,2,1,2,1,2,1,2,1,2)),
(                       {Level XVII}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,3),
(0,0,0,0,0,0,0,0,0,4),
(0,0,0,0,0,0,0,0,2,5),
(0,0,0,0,0,0,0,3,1,6),
(0,0,0,0,0,0,0,1,6,1),
(0,0,0,0,0,0,3,2,5,2),
(0,0,0,0,0,3,4,6,4,3),
(0,0,0,0,0,6,3,4,3,4),
(0,0,0,0,4,5,2,5,2,5),
(0,0,0,6,5,6,1,6,1,6),
(0,0,0,1,6,1,6,1,6,1),
(0,0,5,2,5,2,5,2,5,2),
(0,3,4,3,4,3,4,3,4,3),
(0,4,3,4,3,4,3,4,3,4),
(2,5,2,5,2,5,2,5,2,5),
(1,6,1,6,1,6,1,6,1,6)),
(                       {Level XVIII}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(6,1,4,2,5,5,2,4,1,6),
(6,2,5,1,4,4,1,5,2,6),
(5,6,6,2,5,5,2,6,6,5),
(4,2,5,6,4,4,6,5,2,4),
(5,1,4,6,5,5,6,4,1,5),
(4,2,5,1,6,6,1,5,2,4),
(5,1,4,2,5,5,2,4,1,5),
(4,2,5,1,6,6,1,5,2,4),
(5,1,4,6,5,5,6,4,1,5),
(4,2,5,6,4,4,6,5,2,4),
(5,6,6,2,5,5,2,6,6,5),
(6,2,5,1,4,4,1,5,2,6),
(6,1,4,2,5,5,2,4,1,6)),
(                      {Level XIX}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,6,6,0,0,6,6,0,0),
(0,6,2,5,6,6,5,2,6,0),
(0,6,1,4,2,2,4,1,6,0),
(6,4,2,5,1,1,5,2,4,6),
(6,5,1,4,2,2,4,1,5,6),
(1,6,2,5,1,1,5,2,6,1),
(2,6,1,4,2,2,4,1,6,2),
(1,4,6,5,1,1,5,6,4,1),
(2,5,6,4,2,2,4,6,5,2),
(1,4,2,6,1,1,6,2,4,1),
(2,5,1,6,2,2,6,1,5,2),
(1,4,2,5,6,6,5,2,4,1)),
(                       {Level XX}
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0)));
a1:proov=(
(0 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,0 ),
(5 ,12,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,12,5 ),
(5 ,0 ,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,0 ,5 ,5 ,5 ,5 ,5 ,5 ,0 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,5 ,13,13,13,13,13,13,5 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,5 ,13,13,13, 1,13,13,5 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,5 ,13,13, 1, 1,13,13,5 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,5 ,13,13,13, 1,13,13,5 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,5 ,13,13, 1, 1, 1,13,5 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,5 ,13,13,13,13,13,13,5 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,0 ,5 ,5 ,5 ,5 ,5 ,5 ,0 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0 ,5 ),
(5 ,0 ,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0 ,5 ),
(5 ,12,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,12,5 ),
(0 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,0 ));
a2:proov=(
(0 ,5 ,5 ,0 ,0 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,0 ,0 ,5 ,5 ,5 ,0 ),
(5 ,12,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,12,5 ),
(5 ,0 ,12,0 ,0 ,12,12,12,12,12,12,12,0 ,0 ,0 ,12,0 ,5 ),
(5 ,0 ,12,12,0 ,0 ,12,12,12,12,12,0 ,0 ,12,0 ,12,0 ,5 ),
(5 ,0 ,12,12,0 ,0 ,12,12,12,12,12,0 ,0 ,12,0 ,12,0 ,5 ),
(5 ,0 ,12,12,12,0 ,0 ,5 ,5 ,5 ,5 ,0 ,0 ,12,12,0 ,0 ,5 ),
(5 ,0 ,12,12,12,5 ,0 ,0 ,13,13,0 ,0 ,5 ,12,0 ,12,0 ,5 ),
(5 ,0 ,12,12,12,5 ,13,0 ,13, 1,13,13,5 ,12,0 ,12,0 ,5 ),
(5 ,0 ,0 ,12,12,5 ,13,13, 1, 1,13,13,5 ,0 ,12,12,0 ,5 ),
(5 ,0 ,0 ,12,12,5 ,13,13,13, 1,13,0 ,5 ,12,12,12,0 ,5 ),
(5 ,0 ,12,0 ,12,5 ,0 ,13, 1, 1, 1,0 ,0 ,12,12,12,0 ,5 ),
(5 ,0 ,12,0 ,12,0 ,0 ,13,13,13,13,0 ,0 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,0 ,0 ,0 ,5 ,5 ,5 ,5 ,0 ,0 ,12,12,12,0 ,5 ),
(5 ,0 ,12,12,0 ,0 ,12,12,12,12,0 ,0 ,0 ,0 ,12,12,0 ,5 ),
(5 ,0 ,12,12,0 ,0 ,12,12,12,12,12,12,0 ,0 ,0 ,12,0 ,5 ),
(5 ,0 ,12,0 ,0 ,0 ,12,12,12,12,12,12,12,0 ,0 ,0 ,0 ,5 ),
(5 ,12,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,5 ),
(0 ,5 ,5 ,0 ,0 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,5 ,0 ,0 ,0 ));
a3:proov=(
(0 ,5 ,5 ,0 ,0 ,5 ,0 ,0 ,5 ,5 ,0 ,5 ,0 ,0 ,5 ,5 ,5 ,0 ),
(5 ,12,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,12,0 ),
(5 ,0 ,12,0 ,0 ,12,12,12,12,0 ,12,12,0 ,0 ,0 ,12,0 ,5 ),
(5 ,0 ,12,12,0 ,0 ,12,12,0 ,0 ,12,0 ,0 ,12,0 ,12,0 ,0 ),
(5 ,0 ,12,0 ,0 ,0 ,12,0 ,12,0 ,12,0 ,0 ,12,0 ,12,0 ,5 ),
(5 ,0 ,0 ,0 ,12,0 ,0 ,5 ,5 ,0 ,5 ,0 ,0 ,12,12,0 ,0 ,5 ),
(5 ,0 ,12,12,12,5 ,0 ,0 ,13,0 ,0 ,0 ,5 ,12,0 ,12,0 ,0 ),
(5 ,0 ,12,0 ,12,5 ,13,0 ,13,1 ,13,13,5 ,12,0 ,0 ,0 ,0 ),
(5 ,0 ,0 ,12,0 ,5 ,13,13,1 ,1 ,13,13,5 ,0 ,12,12,0 ,0 ),
(5 ,0 ,0 ,12,12,5 ,13,0 ,13,0 ,13,0 ,5 ,12,12,0 ,0 ,0 ),
(5 ,0 ,12,0 ,12,5 ,0 ,13,1 , 1, 1,0 ,0 ,0 ,12,12,0 ,0 ),
(5 ,0 ,12,0 ,12,0 ,0 ,13,13,0 ,13,0 ,0 ,12,0 ,0 ,0 ,0 ),
(5 ,0 ,12,12,0 ,0 ,0 ,5 ,0 ,0 ,5 ,0 ,0 ,12,12,0 ,0 ,5 ),
(5 ,0 ,12,12,0 ,0 ,0 ,12,12,0 ,0 ,0 ,0 ,0 ,12,12,0 ,5 ),
(5 ,0 ,12,12,0 ,0 ,12,0 ,12,0 ,12,12,0 ,0 ,0 ,12,0 ,0 ),
(5 ,0 ,12,0 ,0 ,0 ,12,12,0 ,0 ,12,12,0 ,0 ,0 ,0 ,0 ,5 ),
(5 ,12,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,5 ,5 ,0 ,0 ,5 ,0 ,0 ,5 ,0 ,0 ,5 ,0 ,5 ,5 ,0 ,0 ,0 ));

a4:proov=(
(3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ),
(3 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ,3 ),
(3 ,0 ,15,11,11,11,11,11,1 ,1 ,11,11,11,11,11,15,0 ,3 ),
(3 ,0 ,11,11,11,11,11,1 ,14,14,1 ,11,11,11,11,11,0 ,3 ),
(3 ,0 ,11,11,11,11,1 ,14,1 ,1 ,14,1 ,11,11,11,11,0 ,3 ),
(3 ,0 ,11,11,11,11,1 ,14,1 ,1 ,14,1 ,11,11,11,11,0 ,3 ),
(3 ,0 ,11,11,1 ,1 ,1 ,14,1 ,1 ,14,1 ,1 ,1 ,11,11,0 ,3 ),
(3 ,0 ,11,1 ,14,14,14,1 ,13,13,1 ,14,14,14, 1,11,0 ,3 ),
(3 ,0 ,1 ,14,1 ,1 ,1 ,13,13,13,13,1 ,1 ,1 ,14,1 ,0 ,3 ),
(3 ,0 ,1 ,14,1 ,1 ,1 ,13,13,13,13,1 ,1 ,1 ,14,1 ,0 ,3 ),
(3 ,0 ,11,1 ,14,14,14,1 ,13,13,1 ,14,14,14,1 ,11,0 ,3 ),
(3 ,0 ,11,11,1 ,1 ,1 ,14,1 ,1 ,14,1 ,1 ,1 ,11,11,0 ,3 ),
(3 ,0 ,11,11,11,11,1 ,14,1 ,1 ,14,1 ,11,11,11,11,0 ,3 ),
(3 ,0 ,11,11,11,11,1 ,14,1 ,1 ,14,1 ,11,11,11,11,0 ,3 ),
(3 ,0 ,11,11,11,11,1 ,1 ,14,14,1 ,11,11,11,11,11,0 ,3 ),
(3 ,0 ,15,11,11,11,11,11,1 ,1 ,11,11,11,11,11,15,0 ,3 ),
(3 ,11,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,11,3 ),
(3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ));
a5:proov=(
(3 ,3 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ,3 ),
(3 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ),
(3 ,0 ,0 ,0 ,11,11,11,11,1 ,1 ,11,11,11,11,0 ,0 ,0 ,3 ),
(3 ,0 ,11,0 ,0 ,11,11,1 ,14,14,1 ,11,11,0 ,0 ,11,0 ,3 ),
(3 ,0 ,11,0 ,0 ,11,1 ,14,1 ,1 ,14,1 ,11,0 ,0 ,11,0 ,3 ),
(3 ,0 ,11,11,0 ,0 ,1 ,14,1 ,1 ,14,1 ,11,0 ,0 ,11,0 ,3 ),
(3 ,0 ,11,11,0 ,0 ,1 ,14,1 ,1 ,14,1 ,0 ,0 ,11,11,0 ,3 ),
(3 ,0 ,11,1 ,0 ,0 ,0 ,1 ,13,13,1 ,0 ,0 ,0 , 1,11,0 ,3 ),
(3 ,0 ,1 ,14,1 ,1 ,0 ,0 ,13,13,13,0 ,0 ,0 ,14,1 ,0 ,3 ),
(3 ,0 ,1 ,14,1 ,1 ,1 ,13,13,13,13,0 ,0 ,1 ,14,1 ,0 ,3 ),
(3 ,0 ,11,1 ,14,14,14,1 ,13,13,1 ,14,14,14,1 ,11,0 ,3 ),
(3 ,0 ,11,11,1 ,1 ,0 ,0 ,1 ,1 ,14,0 ,1 ,0 ,11,11,0 ,3 ),
(3 ,0 ,11,11,11,0 ,0 ,0 ,1 ,1 ,14,0 ,0 ,0 ,11,11,0 ,3 ),
(3 ,0 ,11,11,0 ,0 ,0 ,0 ,1 ,1 ,14,1 ,0 ,0 ,0 ,11,0 ,3 ),
(3 ,0 ,11,0 ,0 ,0 ,0 ,1 ,14,14,1 ,11,11,11,0 ,11,0 ,3 ),
(3 ,0 ,0 ,0 ,0 ,11,11,11,1 ,1 ,11,11,11,11,0 ,0 ,0 ,3 ),
(3 ,11,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ),
(3 ,3 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ));
a6:proov=(
(3 ,3 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ,3 ),
(0 ,3 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ),
(3 ,0 ,0 ,0 ,11,11,0 ,11,1 ,1 ,0 ,11,11,11,0 ,0 ,0 ,3 ),
(0 ,0 ,11,0 ,0 ,11,11,0 ,14,14,1 ,0 ,11,0 ,0 ,11,0 ,3 ),
(0 ,0 ,11,0 ,0 ,11,0 ,0 ,0 ,0 ,14,1 ,0 ,0 ,0 ,11,0 ,3 ),
(0 ,0 ,11,0,0 ,0 ,1 ,14,1 ,1 ,0 ,0 ,11,0 ,0 ,11,0 ,3 ),
(3 ,0 ,0,11,0 ,0 ,1 ,14,1 ,0 ,14,0 ,0 ,0 ,0,11,0 ,3 ),
(0 ,0 ,11,1 ,0 ,0 ,0 ,1 ,13,0,1 ,0 ,0 ,0 , 0,11,0 ,3 ),
(0 ,0 ,1 ,0 ,1 ,1 ,0 ,0 ,13,0,13,0 ,0 ,0 ,14,1 ,0 ,3 ),
(3 ,0 ,0 ,14,1 ,1 ,1 ,13,0 ,0 ,13,0 ,0 ,1 ,0 ,0 ,0 ,3 ),
(0 ,0 ,11,1 ,14,14,14,1 ,13,0 ,0 ,14,0 ,14,1 ,11,0 ,3 ),
(3 ,0 ,0 ,11,1 ,1 ,0 ,0 ,1 ,1 ,14,0 ,1 ,0 ,11,11,0 ,3 ),
(0 ,0 ,0 ,11,11,0 ,0 ,0 ,1 ,1 ,14,0 ,0 ,0 ,11,11,0 ,3 ),
(3 ,0 ,11,0 ,0 ,0 ,0 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,0 ,11,0 ,3 ),
(0 ,0 ,11,0 ,0 ,0 ,0 ,1 ,0 ,0 ,1 ,11,11,11,0 ,11,0 ,3 ),
(0 ,0 ,0 ,0 ,0 ,11,11,11,0 ,1 ,11,11,11,11,0 ,0 ,0 ,3 ),
(0 ,11,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,3 ),
(3 ,3 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ));
a7:proov=(
(0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ),
(3 ,15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15,3 ),
(3 ,15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15,3 ),
(3 ,10,15,10,10,10,10,10,10,10,10,10,10,10,10,15,10,3 ),
(3 ,10,10,10,10,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,10,10,10,10,3 ),
(3 ,10,10,10,3 ,13,13,13,13,13,13,13,13,3 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,3 ,3 ,3 ,3 ,3 ,3 ,13,3 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,3 ,10,10,10,10,3 ,13,3 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,3 ,10,10,10,10,3 ,13,3 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,3 ,10,10,10,10,3 ,13,3 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,3 ,10,10,10,10,3 ,13,3 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,3 ,3 ,3 ,3 ,3 ,3 ,13,3 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,13,13,13,13,13,13,13,3 ,10,10,10,3 ),
(3 ,10,10,10,10,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,10,10,10,10,3 ),
(3 ,10,15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,3 ),
(3 ,15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15,3 ),
(3 ,15,10,10,10,10,10,10,10,10,10,10,10,10,10,10,15,3 ),
(0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ));
a8:proov=(
(0 ,3 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ,0 ),
(3 ,15,0 ,0 ,10,10,10,10,10,10,10,10,10,10,10,0 ,0 ,3 ),
(3 ,15,10,0 ,0 ,10,10,10,10,10,10,10,10,10,0 ,0 ,0 ,3 ),
(3 ,10,15,0 ,0 ,10,10,10,10,10,10,10,10,10,0 ,0 ,10,3 ),
(3 ,10,10,0 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,10,0 ,0 ,10,3 ),
(3 ,10,10,0 ,0 ,0 ,13,13,13,13,13,13,13,3 ,0 ,0 ,10,3 ),
(3 ,10,10,10,0 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ,0 ,0 ,10,3 ),
(3 ,10,10,10,3 ,0 ,0 ,10,10,10,10,3 ,0 ,0 ,0 ,10,10,3 ),
(3 ,10,10,10,3 ,13,0 ,0 ,10,10,10,0 ,0 ,0 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,3 ,10,10,10,10,3 ,13,3 ,10,10,10,3 ),
(3 ,10,10,10,3 ,13,0 ,10,10,10,10,3 ,0 ,0 ,10,10,10,3 ),
(3 ,10,10,10,3 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ,0 ,10,10,3 ),
(3 ,10,10,10,0 ,0 ,0 ,0,13,13,13,13,13,0 ,0 ,10,10,3 ),
(3 ,10,10,10,0 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,10,0 ,0 ,10,3 ),
(3 ,10,15,0 ,0 ,10,10,10,10,10,10,10,10,10,0 ,0 ,10,3 ),
(3 ,15,0 ,0 ,0 ,10,10,10,10,10,10,10,10,10,10,0 ,0 ,3 ),
(3 ,0 ,0 ,0 ,10,10,10,10,10,10,10,10,10,10,10,0 ,0 ,3 ),
(0 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ));
a9:proov=(
(0 ,3 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,0 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ,0 ),
(3 ,15,0 ,0 ,10,10,10,10,10,0 ,10,10,10,10,10,0 ,0 ,3 ),
(0 ,15,10,0 ,0 ,10,10,10,10,0 ,10,10,10,10,0 ,0 ,0 ,3 ),
(3 ,10,15,0 ,0 ,10,10,10,10,10,0 ,10,10,10,0 ,0 ,10,3 ),
(0 ,10,0 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,0 ,3 ,3 ,10,0 ,0 ,10,3 ),
(0 ,10,0 ,0 ,0 ,0 ,13,13,13,13,0 ,13,13,3 ,0 ,0 ,10,3 ),
(0 ,0 ,0 ,10,0 ,0 ,3 ,3 ,3 ,3 ,0 ,3 ,0 ,0 ,0 ,0 ,10,3 ),
(0 ,10,0 ,10,3 ,0 ,0 ,10,10,10,0 ,3 ,0 ,0 ,0 ,0 ,10,3 ),
(3 ,10,0 ,10,3 ,13,0 ,0 ,10,10,0 ,0 ,0 ,0 ,10,0 ,10,3 ),
(0 ,0 ,10,10,3 ,13,3 ,10,10,10,10,3 ,13,3 ,10,10,0 ,3 ),
(0 ,10,0 ,10,3 ,13,0 ,10,10,10,10,3 ,0 ,0 ,10,10,0 ,3 ),
(0 ,0 ,10,10,3 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ,0 ,10,10,0 ),
(3 ,0 ,10,10,0 ,0 ,0 ,0 ,13,0 ,13,13,13,0 ,0 ,10,10,3 ),
(0 ,10,0 ,10,0 ,0 ,3 ,3 ,0 ,3 ,3 ,3 ,3 ,10,0 ,0 ,10,3 ),
(0 ,10,0 ,0 ,0 ,10,10,0 ,10,10,10,10,10,0 ,0 ,0 ,10,3 ),
(3 ,15,0 ,0 ,0 ,0 ,0 ,10,10,0 ,0 ,0 ,0 ,10,10,0 ,0 ,3 ),
(3 ,0 ,0 ,0 ,10,10,10,10,10,10,10,10,10,10,10,0 ,0 ,3 ),
(0 ,0 ,0 ,3 ,3 ,0 ,0 ,0 ,0 ,0 ,3 ,3 ,3 ,3 ,3 ,3 ,0 ,0 ));
a10:proov=(
(4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ),
(4 ,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4 ),
(4 ,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4 ),
(4 ,13,13,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,13,13,4 ),
(4 ,13,13,4 ,4 ,4 ,13,13,13,13,13,13,4 ,4 ,4 ,13,13,4 ),
(4 ,13,13,4 ,4 ,4 ,13,13,13,13,13,13,4 ,4 ,4 ,13,13,4 ),
(4 ,13,13,4 ,13,13,13,13,4 ,4 ,13,13,13,13,4 ,13,13,4),
(4 ,13,13,4 ,13,13,13,4 ,13,13,4 ,13,13,13,4 ,13,13,4 ),
(4 ,13,13,4 ,13,13,4 ,13,4 ,4 ,13,4 ,13,13,4 ,13,13,4 ),
(4 ,13,13,4 ,13,13,4 ,13,4 ,4 ,13,4 ,13,13,4 ,13,13,4 ),
(4 ,13,13,4 ,13,13,13,4 ,13,13,4 ,13,13,13,4 ,13,13,4 ),
(4 ,13,13,4 ,13,13,13,13,4 ,4 ,13,13,13,13,4 ,13,13,4 ),
(4 ,13,13,4 ,4 ,4 ,13,13,13,13,13,13,4 ,4 ,4 ,13,13,4 ),
(4 ,13,13,4 ,4 ,4 ,13,13,13,13,13,13,4 ,4 ,4 ,13,13,4 ),
(4 ,13,13,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,13,13,4 ),
(4 ,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4 ),
(4 ,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4 ),
(4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ));
a11:proov=(
(4 ,0 ,4 ,4 ,4 ,4 ,4 ,4 ,0 ,0 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ),
(4 ,0 ,0 ,13,13,13,13,13,0 ,0 ,13,13,13,13,13,13,0 ,0 ),
(4 ,13,0 ,0 ,13,13,13,13,0 ,0 ,13,13,13,13,13,0 ,0 ,0 ),
(4 ,13,0 ,0 ,4 ,4 ,4 ,4 ,4 ,0 ,0 ,4 ,4 ,4 ,0 ,0 ,0 ,4 ),
(4 ,13,0 ,0 ,4 ,4 ,13,13,13,0 ,0 ,13,4 ,0 ,0 ,13,13,4 ),
(4 ,13,0 ,0 ,0 ,4 ,13,13,13,13,13,13,0 ,0 ,0 ,13,13,4 ),
(4 ,13,13,4 ,0 ,0 ,13,13,4 ,4 ,13,0 ,0 ,0 ,4 ,13,13,4),
(4 ,13,13,4 ,13,0 ,0 ,4 ,13,13,4 ,0 ,0 ,13,4 ,13,13,4 ),
(4 ,13,13,4 ,13,0 ,0 ,13,4 ,4 ,13,4 ,13,13,4 ,13,13,4 ),
(4 ,13,13,4 ,13,13,4 ,13,4 ,4 ,13,4 ,13,13,4 ,13,13,4 ),
(4 ,13,0 ,0 ,13,13,13,4 ,13,13,0 ,13,13,13,4 ,13,13,4 ),
(4 ,13,0 ,0 ,13,13,13,13,4 ,4 ,0 ,0 ,0 ,13,4 ,13,13,4 ),
(4 ,13,13,0 ,0 ,4 ,13,13,13,13,13,13,0 ,0 ,0 ,13,13,4 ),
(4 ,13,13,0 ,0 ,0 ,13,13,13,13,13,13,4 ,0 ,0 ,13,13,4 ),
(4 ,13,13,4 ,0 ,0 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,0 ,0 ,0 ,13,4 ),
(4 ,13,13,13,0 ,0 ,13,13,13,13,13,13,13,13,0 ,0 ,0 ,4 ),
(4 ,13,13,13,0 ,0 ,13,13,13,13,13,13,13,13,13,0 ,0 ,4 ),
(4 ,4 ,4 ,4 ,4 ,0 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,0 ,0 ));
a12:proov=(
(4 ,0 ,4 ,4 ,4 ,4 ,0 ,4 ,0 ,0 ,4 ,4 ,4 ,0 ,4 ,4 ,4 ,4 ),
(4 ,0 ,0 ,13,13,13,0 ,0 ,0 ,0 ,13,13,13,0 ,13,13,0 ,0 ),
(4 ,13,0 ,0 ,13,13,0 ,13,0 ,0 ,13,13,13,0 ,13,0 ,0 ,0 ),
(4 ,13,0 ,0 ,4 ,4 ,4 ,4 ,4 ,0 ,0 ,4 ,4 ,4 ,0 ,0 ,0 ,4 ),
(4 ,13,0 ,0 ,4 ,4 ,0 ,0 ,0 ,0 ,0 ,13,4 ,0 ,0 ,13,13,4 ),
(4 ,13,0 ,0 ,0 ,4 ,13,13,13,13,13,13,0 ,0 ,0 ,13,13,4 ),
(4 ,13,13,4 ,0 ,0 ,13,13,0 ,4 ,13,0 ,0 ,0 ,0 ,0 ,0 ,4),
(0 ,13,13,4 ,13,0 ,0 ,4 ,0 ,0 ,4 ,0 ,0 ,13,4 ,13,13,0 ),
(0 ,13,13,4 ,13,0 ,0 ,13,4 ,0 ,13,4 ,13,13,4 ,13,13,4 ),
(0 ,13,13,4 ,13,0 ,0 ,13,4 ,0 ,0 ,0 ,13,13,0 ,0 ,0 ,0 ),
(4 ,13,0 ,0 ,13,13,13,4 ,13,13,0 ,13,13,13,4 ,0 ,13,4 ),
(0 ,13,0 ,0 ,13,13,0 ,13,4 ,4 ,0 ,0 ,0 ,13,4 ,0 ,13,4 ),
(4 ,0 ,13,0 ,0 ,4 ,13,0 ,13,13,13,13,0 ,0 ,0 ,0 ,13,4 ),
(0 ,0 ,13,0 ,0 ,0 ,13,13,0 ,0 ,13,13,4 ,0 ,0 ,13,13,4 ),
(4 ,0 ,13,4 ,0 ,0 ,4 ,4 ,4 ,0 ,4 ,4 ,4 ,0 ,0 ,0 ,13,4 ),
(4 ,13,0 ,13,0 ,0 ,13,13,13,0 ,13,13,13,13,0 ,0 ,0 ,4 ),
(4 ,13,13,0 ,0 ,0 ,13,13,13,0 ,0 ,0 ,0 ,13,13,0 ,0 ,4 ),
(4 ,4 ,4 ,4 ,4 ,0 ,4 ,4 ,4 ,0 ,0 ,4 ,4 ,0 ,0 ,4 ,0 ,0 ));
a13:proov=(
(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1),
(1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,1),
(1,9,1,9,9,9,9,9,9,9,9,9,9,9,9,1,9,1),
(1,9,9,1,1,1,9,9,9,9,9,9,1,1,1,9,9,1),
(1,9,9,1,1,1,9,9,9,9,9,9,1,1,1,9,9,1),
(1,9,9,1,1,1,9,9,9,9,9,9,1,1,1,9,9,1),
(1,9,9,9,9,9,1,9,9,9,9,1,9,9,9,9,9,1),
(1,9,9,9,9,9,9,1,1,1,1,9,9,9,9,9,9,1),
(1,9,9,9,9,9,9,1,1,1,1,9,9,9,9,9,9,1),
(1,9,9,9,9,9,9,1,1,1,1,9,9,9,9,9,9,1),
(1,9,9,9,9,9,9,1,1,1,1,9,9,9,9,9,9,1),
(1,9,9,9,9,9,1,9,9,9,9,1,9,9,9,9,9,1),
(1,9,9,1,1,1,9,9,9,9,9,9,1,1,1,9,9,1),
(1,9,9,1,1,1,9,9,9,9,9,9,1,1,1,9,9,1),
(1,9,9,1,1,1,9,9,9,9,9,9,1,1,1,9,9,1),
(1,9,1,9,9,9,9,9,9,9,9,9,9,9,9,1,9,1),
(1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,1,1),
(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
a14:proov=(
(1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0),
(1,0,0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0),
(1,9,0,0,9,9,9,9,9,9,9,9,9,9,9,0,0,1),
(1,9,0,0,1,1,9,9,9,9,9,9,1,1,0,0,9,1),
(1,9,0,0,0,0,0,9,9,9,9,9,1,0,0,9,9,1),
(1,9,9,1,0,0,0,9,9,9,9,9,1,0,0,9,9,1),
(1,9,9,9,9,0,0,9,9,9,9,1,0,0,9,9,9,1),
(1,9,9,9,9,9,9,1,1,1,1,0,0,9,9,9,9,1),
(1,9,9,9,9,9,9,1,1,1,1,9,9,9,9,9,9,1),
(1,9,9,9,9,9,9,1,1,1,1,9,9,9,9,9,9,1),
(1,9,9,9,9,9,9,1,1,1,1,9,9,9,9,9,9,1),
(1,9,9,9,9,0,0,9,9,9,0,0,9,9,9,9,9,1),
(1,9,9,1,1,0,9,9,9,9,9,0,0,1,1,9,9,1),
(1,9,9,1,0,0,9,9,9,9,9,0,0,0,1,9,9,1),
(1,9,9,0,0,1,9,9,9,9,9,9,1,0,0,9,9,1),
(1,9,1,0,9,9,9,9,9,9,9,9,9,0,0,1,9,1),
(1,1,0,0,9,9,9,9,9,9,9,9,9,0,0,0,1,1),
(1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1));
a15:proov=(
(1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0),
(1,0,0,9,9,9,9,9,0,0,9,0,9,9,9,0,0,0),
(1,9,0,0,9,9,9,9,9,0,9,9,0,9,9,0,0,1),
(1,9,0,0,1,1,9,9,9,0,9,9,1,0,0,0,9,1),
(1,9,0,0,0,0,0,9,0,9,0,9,1,0,0,9,9,1),
(1,9,9,0,0,0,0,0,9,9,0,9,1,0,0,9,9,1),
(0,0,0,9,0,0,0,9,9,9,9,1,0,0,9,0,0,1),
(1,9,9,9,0,9,9,1,1,1,1,0,0,0,0,0,0,0),
(1,9,9,0,9,9,9,0,0,0,1,9,9,9,9,9,0,0),
(0,0,0,9,9,9,9,1,1,1,0,9,9,9,0,0,9,0),
(1,9,0,0,0,0,9,1,1,1,1,0,0,0,9,9,9,0),
(1,9,9,9,9,0,0,0,9,9,0,0,9,0,0,9,9,1),
(1,9,9,1,1,0,9,9,0,9,9,0,0,0,1,0,0,0),
(0,0,0,0,0,0,9,9,0,9,9,0,0,0,1,9,9,1),
(1,9,9,0,0,1,9,9,0,9,9,9,1,0,0,0,0,0),
(1,9,1,0,9,0,0,0,0,0,9,9,9,0,0,1,9,1),
(1,1,0,0,9,9,9,9,9,0,0,0,9,0,0,0,1,1),
(1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1));
a16:proov=(
(14,14,0 ,0 ,14,14,14,14,14,14,14,14,14,14,0 ,0 ,14,14),
(14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14),
(0 ,14,14,14,14,14,0 ,0 ,0 ,0 ,0 ,0 ,14,14,14,14,14,0 ),
(0 ,14,14,14,0 ,0 ,0 ,0 ,14,14,0 ,0 ,0 ,0 ,14,14,14,0 ),
(14,14,14,0 ,0 ,0 ,14,14,0 ,0 ,14,14,0 ,0 ,0 ,14,14,14),
(14,14,14,0 ,0 ,14,14,14,0 ,0 ,14,14,14,0 ,0 ,14,14,14),
(14,14,0 ,0 ,14,14,14,0 ,0 ,0 ,0 ,14,14,14,0 ,0 ,14,14),
(14,14,0 ,0 ,14,14,0 ,0 ,6 ,6 ,0 ,0 ,14,14,0 ,0 ,14,14),
(14,14,0 ,14,0 ,0 ,0 ,6 ,6 ,6 ,6 ,0 ,0 ,0 ,14,0 ,14,14),
(14,14,0 ,14,0 ,0 ,0 ,6 ,6 ,6 ,6 ,0 ,0 ,0 ,14,0 ,14,14),
(14,14,0 ,0 ,14,14,0 ,0 ,6 ,6 ,0 ,0 ,14,14,0 ,0 ,14,14),
(14,14,0 ,0 ,14,14,14,0 ,0 ,0 ,0 ,14,14,14,0 ,0 ,14,14),
(14,14,14,0 ,0 ,14,14,14,0 ,0 ,14,14,14,0 ,0 ,14,14,14),
(14,14,14,0 ,0 ,0 ,14,14,0 ,0 ,14,14,0 ,0 ,0 ,14,14,14),
(0 ,14,14,14,0 ,0 ,0 ,0 ,14,14,0 ,0 ,0 ,0 ,14,14,14,0 ),
(0 ,14,14,14,14,14,0 ,0 ,0 ,0 ,0 ,0 ,14,14,14,14,14,0 ),
(14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14),
(14,14,0 ,0 ,14,14,14,14,14,14,14,14,14,14,0 ,0 ,14,14));
a17:proov=(
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,14,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,14,14,14,14,14,14,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,14,14,14,0 ,0 ,14,14,14,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,14,14,14,0 ,0 ,0 ,0 ,14,14,14,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,14,14,0 ,0 ,6 ,6 ,0 ,0 ,14,14,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,14,14,0 ,0 ,6 ,6 ,6 ,6 ,0 ,0 ,14,14,0 ,0 ,0 ),
(0 ,0 ,0 ,14,14,0 ,0 ,6 ,6 ,6 ,6 ,0 ,0 ,14,14,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,14,14,0 ,0 ,6 ,6 ,0 ,0 ,14,14,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,14,14,14,0 ,0 ,0 ,0 ,14,14,14,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,14,14,14,0 ,0 ,14,14,14,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,14,14,14,14,14,14,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,14,14,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ));
a18:proov=(
(0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,6 ,6 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,6 ,6 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ),
(0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ));

var  draiver,mood,veakood               :integer;
     kus                                :array[1..19,1..10] of integer;
     on,l1,korras,l2,l3,valja,kasuldse,
     Exit_To_Dos,olemas,lope,
     HakkaPullima                       :boolean;
     algus                              :array[1..10]of boolean;
     vana                               :fillpatterntype;
     stackup,gameover                   :pointer;
     ruut                               :array[1..33]of pointer;
     kp                                 :array[1..10]of pointer;
     kokku,maxk,j,kx,ky,arv,ver,hor,alla,
     a,kuju1,kuju2,kuju3,u,k,x1,vahekuju,
     maxa,y,i,v,paus,max1,max2,max3,ggg,
     veel,varv,level,ridu,vahene,smart  :integer;
     punkte                             :longint;
     lubatud                            :array[1..99]of integer;
     event:tevent;
     kaks                               :array[1..10]of integer;
     onvaja                             :array[1..10]of boolean;
     ajutine:string;
     koord                              :array[1..100] of koordinaadid;
     topten                             :array[1..10] of vou;
     highfile                           :file of vou;
     nimisisse                          :string[10];
     kont                               :file;
     shit                               :char;
     pulla                              :longint;
     Hour,Minute,Second,Second1,Sec100  : Word;
(****************************************************************************)
Procedure egavgadriver;external;
(****************************************************************************)
Procedure triplexfont;external;
(****************************************************************************)

PROCEDURE TeeAsjad;
begin
setactivepage(1);
SetTextStyle(1, 0, 4);
getmem(ruut[32],imagesize(0,0,200,360));
getmem(ruut[33],imagesize(0,0,200,380));
setcolor(7);
Outtextxy(159,169,'Game');
Outtextxy(149,199,'Paused');
setcolor(1);
Outtextxy(160,170,'Game');
Outtextxy(150,200,'Paused');
getimage(100,20,300,400,ruut[33]^);
Cleardevice;
for u:=1 to 10 do getmem(kp[u],imagesize(0,0,50,250));
for u:=1 to 18 do
for y:=1 to 18 do
getmem(ruut[31],imagesize(200,200,220,220));
getimage(200,200,220,220,ruut[31]^);
(**************MUUD******************)
SetTextStyle(1, 0, 6);
Setcolor(9);
Outtextxy(170,20,'S');
Setcolor(2);
Outtextxy(198,20,'T');
Setcolor(11);
Outtextxy(228,20,'A');
Setcolor(12);
Outtextxy(259,20,'C');
Setcolor(13);
Outtextxy(289,20,'K');
Setcolor(14);
Outtextxy(322,20,' U');
Setcolor(4);
Outtextxy(384,20,'P');
Setcolor(10);
Outtextxy(414,20,' !');
getmem(stackup,imagesize(170,35,449,72));
getimage(170,35,449,72,stackup^);
Cleardevice;
SetTextStyle(1, 0, 2);
Setcolor(12);
getfillpattern(vana);
setfillpattern(vana,1);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(101,22,299,38);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(101,22,299,38);

Setcolor(14);
Outtextxy(105,17,'G A M E   O V E R');
getmem(gameover,imagesize(100,20,300,40));
getimage(100,20,300,40,gameover^);
(**************Terve******************)
for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a1[u,y]);
getmem(ruut[1],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[1]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a4[u,y]);
getmem(ruut[2],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[2]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a7[u,y]);
getmem(ruut[3],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[3]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a10[u,y]);
getmem(ruut[4],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[4]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a13[u,y]);
getmem(ruut[5],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[5]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a16[u,y]);
getmem(ruut[6],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[6]^);
(*******************Natuke********************)
for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a2[u,y]);
getmem(ruut[11],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[11]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a5[u,y]);
getmem(ruut[12],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[12]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a8[u,y]);
getmem(ruut[13],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[13]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a11[u,y]);
getmem(ruut[14],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[14]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a14[u,y]);
getmem(ruut[15],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[15]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a17[u,y]);
getmem(ruut[16],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[16]^);
(*******************Palju********************)
for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a3[u,y]);
getmem(ruut[21],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[21]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a6[u,y]);
getmem(ruut[22],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[22]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a9[u,y]);
getmem(ruut[23],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[23]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a12[u,y]);
getmem(ruut[24],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[24]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a15[u,y]);
getmem(ruut[25],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[25]^);

for u:=1 to 18 do
for y:=1 to 18 do
putpixel(y+101,u+101,a18[u,y]);
getmem(ruut[26],imagesize(100,100,120,120));
getimage(100,100,120,120,ruut[26]^);
setActivepage(0);
end;
(****************************************************************************)
PROCEDURE KGB;
BEGIN
  ClrScr;
  if registerbgidriver(@egavgadriver)<0 then
      BEGIN
      Writeln('HEY ! You  Have  No  EGA/VGA ');
      writeln('      compatible video card.');
      Halt;
      END;
  if registerbgifont(@triplexfont)<0 then
      BEGIN
      Writeln('HEY ! You  Have Modified This');
      writeln('      Version Of Stack  Up !.');
      Halt;
      END;
  {Assign(kont,'trip.chr');
  {$I-
  reset(kont);
  {$I+
  if IOresult <> 0 then
  begin
  Writeln('HEY ! You  Have  No TRIP.CHR In Your Game Directory.');
  Halt;
  end;
  close(kont);}
  draiver:=9;mood:=2;
  InitGraph(draiver,mood,'');
  veakood:=GraphResult;
  IF veakood<>GrOK THEN
    BEGIN
      Writeln('HEY ! You  Have  No  EGA/VGA ');
      writeln('      compatible video card.');
      Halt;
    END;
END;
(****************************************************************************)
Procedure Vasak;
begin
if x1-20<0 then exit;
if l1=true then if kus[round((i-11)/20)+1,round((x1-20)/20)+1]<>0 then exit;
if l2=true then if kus[round((i-11)/20)+1,round((x1   )/20)+1]<>0 then exit;
if l3=true then if kus[round((i-11)/20)+1,round((x1+20)/20)+1]<>0 then exit;

for v:=x1 downto x1-20 do
begin
if (keypressed)and (v>x1-15)then shit:=readkey;
delay(paus);
if l1=true then putimage(100+v,i,ruut[kuju1]^,0);
if l2=true then putimage(120+v,i,ruut[kuju2]^,0);
if l3=true then putimage(140+v,i,ruut[kuju3]^,0);
end;
x1:=v;
max1:=380;
max2:=380;
max3:=380;
k:=round(x1/20)+1;
for u:=1 to 19 do
if kus[u,k]<>0 then max1:=max1-20;
for u:=1 to 19 do
if kus[u,k+1]<>0 then max2:=max2-20;
for u:=1 to 19 do
if kus[u,k+2]<>0 then max3:=max3-20;
end;
(****************************************************************************)
Procedure parem;
begin
if x1+80>200 then exit;
if l3=true   then if kus[round((i-11)/20)+1,round((x1+80)/20)]<>0 then exit;
if (l2=true) and(l3=false) then if kus[round((i-11)/20)+1,round((x1+60)/20)]<>0 then exit;
if (l1=true) and(l2=false) then if kus[round((i-11)/20)+1,round((x1+40)/20)]<>0 then exit;
for v:=x1 to x1+20 do
begin
if (keypressed)and (v<x1+15)then shit:=readkey;
delay(paus);
if l1=true then putimage(100+v,i,ruut[kuju1]^,0);
if l2=true then putimage(120+v,i,ruut[kuju2]^,0);
if l3=true then putimage(140+v,i,ruut[kuju3]^,0);
end;
x1:=v;

max1:=380;
max2:=380;
max3:=380;
k:=round(x1/20)+1;
for u:=1 to 19 do
if kus[u,k]<>0 then max1:=max1-20;
for u:=1 to 19 do
if kus[u,k+1]<>0 then max2:=max2-20;
for u:=1 to 19 do
if kus[u,k+2]<>0 then max3:=max3-20;
end;
(****************************************************************************)
Procedure PanePaika;
begin
SetLineStyle(UserBitLn, $C3, ThickWidth);

setcolor(12);
line(96,41,96,403);
line(304,41,304,403);
line(99,402,301,402);
setcolor(10);
line(305,46,305,404);
line(95,46,95,404);
line(94,404,303,404);
setcolor(13);
line(98,43,98,401);
line(307,43,307,405);
line(95,407,305,407);
setcolor(14);
line(93,44,93,405);
line(302,44,302,401);
line(97,405,304,405);
(****REA RUUT*****)
setcolor(13);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(400,100,500,160);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(400,100,500,160);
setcolor(12);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(402,102,498,158);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(402,102,498,158);
setcolor(14);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(404,104,496,156);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(404,104,496,156);
SetTextStyle(0, 0, 0);
setcolor(10);
outtextxy(413,95,'LINES LEFT');

(*******PUNKTIRUUT*********)
setcolor(13);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(355,180,545,240);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(355,180,545,240);
setcolor(12);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(357,182,543,238);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(357,182,543,238);
setcolor(14);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(359,184,541,236);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(359,184,541,236);
SetTextStyle(0, 0, 0);
setcolor(10);
outtextxy(435,175,'SCORE');
(*******LEVELIRUUT*********)
setcolor(13);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(400,260,500,320);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(400,260,500,320);
setcolor(12);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(402,262,498,318);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(402,262,498,318);
setcolor(14);
SetLineStyle(DottedLn, 0, NormWidth);
rectangle(404,264,496,316);
SetLineStyle(UserBitLn, $C3, ThickWidth);
rectangle(404,264,496,316);
SetTextStyle(0, 0, 0);
setcolor(10);
outtextxy(435,255,'LEVEL');
end;
(****************************************************************************)
Procedure S1;
Begin
sound(50);
delay(50);
nosound;
kus[round(i/20),round(x1/20)+1]:=kuju1;
l1:=false;
if (l2=false)and(l3=false) then begin punkte:=punkte+5;korras:=true;end
end;
(****************************************************************************)
Procedure S2;
Begin
sound(50);
delay(50);
nosound;
kus[round(i/20),round((x1+20)/20)+1]:=kuju2;
l2:=false;
if (l1=false)and(l3=false) then begin punkte:=punkte+5;korras:=true;end
end;
(****************************************************************************)
Procedure S3;
Begin
sound(50);
delay(50);
nosound;
kus[round(i/20),round((x1+40)/20)+1]:=kuju3;
l3:=false;
if (l1=false)and(l2=false) then begin punkte:=punkte+5;korras:=true;end
end;
(****************************************************************************)
Procedure PanePunkti;
Begin
(*******Palju Jaanud*******)
str(lubatud[level]-ridu,ajutine);
SetTextStyle(1, 0, 4);
setfillpattern(vana,0);
bar(406,106,494,154);
setcolor(14);
if (lubatud[level]-ridu<10) and(lubatud[level]-ridu>-1)then outtextxy(420,110,'00'+ajutine);
if (lubatud[level]-ridu>=10)and(lubatud[level]-ridu<100) then outtextxy(420,110,'0'+ajutine);
if lubatud[level]-ridu>=100 then outtextxy(420,110,ajutine);
(**********Punktid**********)
str(punkte,ajutine);
setcolor(10);
bar(361,186,539,234);
setcolor(14);
if (punkte<10)                         then outtextxy(380,190,'000000'+ajutine);
if (punkte<100)     and(punkte>=10)    then outtextxy(380,190,'00000'+ajutine);
if (punkte>=100)    and(punkte<1000)   then outtextxy(380,190,'0000'+ajutine);
if (punkte>=1000)   and(punkte<10000)  then outtextxy(380,190,'000'+ajutine);
if (punkte>=10000)  and(punkte<100000) then outtextxy(380,190,'00'+ajutine);
if (punkte>=100009) and(punkte<1000000)then outtextxy(380,190,'0'+ajutine);
if  punkte>=1000000                    then outtextxy(380,190,ajutine);
(***********Level***********)
str(level,ajutine);
SetTextStyle(1, 0, 4);
setfillpattern(vana,0);
bar(406,266,494,314);
setcolor(14);
if level<10  then outtextxy(445,270,ajutine);
if level>=10 then outtextxy(433,270,ajutine);
end;
(****************************************************************************)
Procedure KaotaAra;
Begin
sound(400);
for u:=1 to arv-1 do
begin
kx:=koord[u].x*20+20;
ky:=koord[u].y*20;
putimage(kx+60,ky,ruut[kus[koord[u].y,koord[u].x]+10]^,0);
end;
delay(150);
sound(150);
for u:=1 to arv-1 do
begin
kx:=koord[u].x*20+20;
ky:=koord[u].y*20;
putimage(kx+60,ky,ruut[kus[koord[u].y,koord[u].x]+20]^,0)
end;
delay(150);
sound(200);
for u:=1 to arv-1 do
begin
kx:=koord[u].x*20+20;
ky:=koord[u].y*20;
putimage(kx+60,ky,ruut[31]^,0);
kus[koord[u].y,koord[u].x]:=0;
end;
delay(150);
nosound;
(************************************************************************)
for a:=1 to 10 do algus[a]:=false;
kokku:=0;
maxk:=kokku;
maxa:=0;
for hor:=1 to 10 do
begin
     if (maxk<kokku)and(kasuldse) then maxk:=kokku;
     kokku:=0;kasuldse:=false;
     for ver :=1 to 19 do
     begin
         if kus[ver,hor]<>0 then algus[hor]:=true;
         if (algus[hor])and
            (kus[ver+1,hor]=0)and
            (ver+1<20) then kokku:=kokku+1;
         if kus[ver,hor]<>0 then kasuldse:=true;
         algus[hor]:=false;
     end;
end;
if (maxk<kokku)and(kasuldse) then maxk:=kokku;
for a:=1 to maxk do
    begin
         for u:=1 to 10 do onvaja[u]:=false;
         for u:=1 to 10 do kaks[u]:=0;

         for hor:=1 to 10 do
         begin
            korras:=false;
            ver:=20;
            repeat
               dec(ver);
               if (kus[ver,hor]=0) then
               begin
                  inc(kaks[hor]);
                  repeat dec(ver);if kus[ver,hor]<>0 then
                     begin onvaja[hor]:=true;korras:=true;end
                     else
                     inc(kaks[hor])
                  until (korras)or(ver<2);
               end;
            until (korras)or(ver<2);

            if korras then getimage(hor*20+80,0,hor*20+100,ver*20+20,kp[hor]^);
         end;
         maxa:=0;
         for u:=1 to 10 do if (kaks[u]>maxa)and(onvaja[u]) then maxa:=kaks[u];

         for alla:=1 to maxa*20 do
         for hor:=1 to 10 do if (onvaja[hor])and(kaks[hor]*20>alla)then putimage(hor*20+80,alla+1,kp[hor]^,0);

         sound(50);
         delay(50);
         nosound;

         for hor:=1 to 10 do for u:=1 to kaks[hor] do
         for ver:=19 downto 2 do
         if kus[ver,hor]=0 then
            begin
            kus[ver,hor]:=kus[ver-1,hor];
            kus[ver-1,hor]:=0;
            end;
    end;
end;
(****************************************************************************)
Procedure Kontroll;
Begin
arv:=1;
{}
on:=false;
for hor:=1 to 10 do
for ver:=19 downto 1 do
begin
if kus[ver,hor]<>0 then
     begin
     if (kus[ver,hor]=kus[ver-1,hor]) and
        (kus[ver,hor]=kus[ver-2,hor]) and
        (kus[ver,hor]=kus[ver-3,hor]) and
        (kus[ver,hor]=kus[ver-4,hor]) and
        (kus[ver,hor]<>0) and
        (kus[ver-1,hor]<>0) and
        (kus[ver-2,hor]<>0) and
        (kus[ver-3,hor]<>0) and
        (kus[ver-4,hor]<>0)
        then
        begin
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor;
        koord[arv+1].y:=ver-1;
        koord[arv+2].x:=hor;
        koord[arv+2].y:=ver-2;
        koord[arv+3].x:=hor;
        koord[arv+3].y:=ver-3;
        koord[arv+4].x:=hor;
        koord[arv+4].y:=ver-4;
        arv:=arv+5;
        end;
     if (kus[ver,hor]=kus[ver-1,hor+1]) and
        (kus[ver,hor]=kus[ver-2,hor+2]) and
        (kus[ver,hor]=kus[ver-3,hor+3]) and
        (kus[ver,hor]=kus[ver-4,hor+4]) and
        (kus[ver,hor]<>0) and
        (kus[ver-1,hor+1]<>0) and
        (kus[ver-2,hor+2]<>0) and
        (kus[ver-2,hor+3]<>0) and
        (kus[ver-3,hor+4]<>0) and (hor<7)
        then
        begin
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver-1;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver-2;
        koord[arv+3].x:=hor+3;
        koord[arv+3].y:=ver-3;
        koord[arv+4].x:=hor+4;
        koord[arv+4].y:=ver-4;
        arv:=arv+5;
        end;
     if (kus[ver,hor]=kus[ver,hor+1]) and
        (kus[ver,hor]=kus[ver,hor+2])  and
        (kus[ver,hor]=kus[ver,hor+3])  and
        (kus[ver,hor]=kus[ver,hor+4])  and
        (kus[ver,hor]<>0) and
        (kus[ver,hor+1]<>0) and
        (kus[ver,hor+2]<>0) and
        (kus[ver,hor+3]<>0) and
        (kus[ver,hor+4]<>0) and
        (hor<7) then
        begin
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver;
        koord[arv+3].x:=hor+3;
        koord[arv+3].y:=ver;
        koord[arv+4].x:=hor+4;
        koord[arv+4].y:=ver;
        arv:=arv+5;
        end;
     if (kus[ver,hor]=kus[ver+1,hor+1]) and
        (kus[ver,hor]=kus[ver+2,hor+2]) and
        (kus[ver,hor]=kus[ver+3,hor+3]) and
        (kus[ver,hor]=kus[ver+4,hor+4]) and
        (kus[ver,hor]<>0) and
        (kus[ver+1,hor+1]<>0) and
        (kus[ver+2,hor+2]<>0)and
        (kus[ver+3,hor+3]<>0)and
        (kus[ver+4,hor+4]<>0)and
        (hor<7)and(ver<16)then
        begin
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver+1;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver+2;
        koord[arv+3].x:=hor+3;
        koord[arv+3].y:=ver+3;
        koord[arv+4].x:=hor+4;
        koord[arv+4].y:=ver+4;
        arv:=arv+5;
        end;
        end;
end;

{}
for hor:=1 to 10 do
for ver:=19 downto 1 do
begin
if kus[ver,hor]<>0 then
     begin
     if (kus[ver,hor]=kus[ver-1,hor]) and
        (kus[ver,hor]=kus[ver-2,hor]) and
        (kus[ver,hor]=kus[ver-3,hor]) and
        (kus[ver,hor]<>0) and
        (kus[ver-1,hor]<>0) and
        (kus[ver-2,hor]<>0) and
        (kus[ver-3,hor]<>0)
        then
        begin
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor;
        koord[arv+1].y:=ver-1;
        koord[arv+2].x:=hor;
        koord[arv+2].y:=ver-2;
        koord[arv+3].x:=hor;
        koord[arv+3].y:=ver-3;
        arv:=arv+4;
        end;
     if (kus[ver,hor]=kus[ver-1,hor+1]) and
        (kus[ver,hor]=kus[ver-2,hor+2]) and
        (kus[ver,hor]=kus[ver-3,hor+3]) and
        (kus[ver,hor]<>0) and
        (kus[ver-1,hor+1]<>0) and
        (kus[ver-2,hor+2]<>0) and
        (kus[ver-3,hor+3]<>0) and (hor<8)
        then
        begin
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver-1;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver-2;
        koord[arv+3].x:=hor+3;
        koord[arv+3].y:=ver-3;
        arv:=arv+4;
        end;
     if (kus[ver,hor]=kus[ver,hor+1]) and
        (kus[ver,hor]=kus[ver,hor+2])  and
        (kus[ver,hor]=kus[ver,hor+3])  and
        (kus[ver,hor]<>0) and
        (kus[ver,hor+1]<>0) and
        (kus[ver,hor+2]<>0) and
        (kus[ver,hor+3]<>0) and
        (hor<8) then
        begin
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver;
        koord[arv+3].x:=hor+3;
        koord[arv+3].y:=ver;
        arv:=arv+4;
        end;
     if (kus[ver,hor]=kus[ver+1,hor+1]) and
        (kus[ver,hor]=kus[ver+2,hor+2]) and
        (kus[ver,hor]=kus[ver+3,hor+3]) and
        (kus[ver,hor]<>0) and
        (kus[ver+1,hor+1]<>0) and
        (kus[ver+2,hor+2]<>0)and
        (kus[ver+3,hor+3]<>0)and
        (hor<8)and(ver<17)then
        begin
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver+1;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver+2;
        koord[arv+3].x:=hor+3;
        koord[arv+3].y:=ver+3;
        arv:=arv+4;
        end;
        end;
end;

{}
for hor:=1 to 10 do
for ver:=19 downto 1 do
begin
if kus[ver,hor]<>0 then
     begin
     if (kus[ver,hor]=kus[ver-1,hor]) and
        (kus[ver,hor]=kus[ver-2,hor]) and
        (kus[ver,hor]<>0) and
        (kus[ver-1,hor]<>0) and
        (kus[ver-2,hor]<>0)
        then
        begin
        inc(ridu);
        punkte:=punkte+30*smart;
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor;
        koord[arv+1].y:=ver-1;
        koord[arv+2].x:=hor;
        koord[arv+2].y:=ver-2;
        arv:=arv+3;
        end;
     if (kus[ver,hor]=kus[ver-1,hor+1]) and
        (kus[ver,hor]=kus[ver-2,hor+2]) and
        (kus[ver,hor]<>0) and
        (kus[ver-1,hor+1]<>0) and
        (kus[ver-2,hor+2]<>0) and (hor<9)
        then
        begin
        inc(ridu);
        punkte:=punkte+30*smart;
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver-1;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver-2;
        arv:=arv+3;
        end;
     if (kus[ver,hor]=kus[ver,hor+1]) and
        (kus[ver,hor]=kus[ver,hor+2])  and
        (kus[ver,hor]<>0) and
        (kus[ver,hor+1]<>0) and
        (kus[ver,hor+2]<>0) and
        (hor<9) then
        begin
        inc(ridu);
        punkte:=punkte+30*smart;
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver;
        arv:=arv+3;
        end;
     if (kus[ver,hor]=kus[ver+1,hor+1]) and
        (kus[ver,hor]=kus[ver+2,hor+2]) and
        (kus[ver,hor]<>0) and
        (kus[ver+1,hor+1]<>0) and
        (kus[ver+2,hor+2]<>0)and
        (hor<9)and(ver<18)then
        begin
        inc(ridu);
        punkte:=punkte+30*smart;
        on:=true;
        koord[arv].x:=hor;
        koord[arv].y:=ver;
        koord[arv+1].x:=hor+1;
        koord[arv+1].y:=ver+1;
        koord[arv+2].x:=hor+2;
        koord[arv+2].y:=ver+2;
        arv:=arv+3;
        end;
        end;
end;
{}
if on then begin smart:=smart+1;kaotaara;kontroll;end;
on:=false;
smart:=1;
PanePunkti;
end;
(****************************************************************************)
procedure Mang_On_Labi;
Begin
for u:= 1 to 380 do putimage(100,u,gameover^,0);
for u:= 380 downto 210 do putimage(100,u,gameover^,0);
delay(3000);
end;
(****************************************************************************)
Procedure TeeLevel;
Begin
For hor:=1 to 10 do
for ver:=1 to 19 do
begin
kus[ver,hor]:=0;
kx:=hor*20+20;
ky:=ver*20;
if kus[ver,hor]>0 then putimage(kx+60,ky,ruut[kus[ver,hor]]^,0)
                  else putimage(kx+60,ky,ruut[31]^,0);
end;
SetTextStyle(1, 0, 0);
str(level,ajutine);
setcolor(12);
if level <10 then Outtextxy(150,200,'Level '+ajutine) else Outtextxy(135,200,'Level '+ajutine);
Delay(3000);

For hor:=1 to 10 do
for ver:=1 to 19 do
begin
kus[ver,hor]:=0;
kx:=hor*20+20;
ky:=ver*20;
if kus[ver,hor]>0 then putimage(kx+60,ky,ruut[kus[ver,hor]]^,0)
                  else putimage(kx+60,ky,ruut[31]^,0);
end;
Outtextxy(115,200,'Get Ready !');
Delay(3000);

For hor:=1 to 10 do
for ver:=1 to 19 do
begin
kus[ver,hor]:=korrus[level,ver,hor];
kx:=hor*20+20;
ky:=ver*20;
if kus[ver,hor]>0 then putimage(kx+60,ky,ruut[kus[ver,hor]]^,0)
                  else putimage(kx+60,ky,ruut[31]^,0);
end;
end;
(****************************************************************************)
Procedure PiiluPunkti;
label veelkord;
Begin
veelkord:
assign(highfile,'stack_up.hig');
{$I-}
reset(highfile);
{$I+}
if IOresult <> 0 then
   begin
   rewrite(highfile);
   for u:=1 to 10 do write(highfile,topten[u]);
   close(highfile);
   goto veelkord;
   end;
for u:=1 to 10 do read(highfile,topten[u]);
u:=0;
olemas:=false;
repeat
inc(u);
if (punkte>=topten[u].summa) then olemas:=true;
until (olemas)or(u=10);
if olemas then
     begin
     for a:=10 downto u+1 do topten[a]:=topten[a-1];
     topten[u].summa:=punkte;
     topten[u].nimi:='';
     end;
ClearDevice;
SetTextStyle(1, 0, 0);
setcolor(4);
outtextxy(225,40,'High Scores');
if olemas then
begin
setcolor(u+4);
setfillpattern(vana,0);
SetTextStyle(0, 0, 0);
outtextxy(30,u*35+93,'Enter Your');
outtextxy(30,u*35+103,'Name Here !');
SetTextStyle(1, 0, 0);
ggg:=9;
Repeat
For i:=1 to 10 do
begin
str(topten[i].summa,ajutine);
setcolor(ggg);
ggg:=ggg+1;
if ggg=15 then ggg:=9;
outtextxy(225,40,'High Scores');
if topten[i].nimi >'' then outtextxy(130,i*35+80,topten[i].nimi);
if topten[i].summa >0 then outtextxy(370,i*35+80,ajutine);
if (topten[i].nimi='') and(olemas=false)then outtextxy(130,i*35+80,'......................');
if (topten[i].nimi='') and(olemas=true)and(i<>u)then outtextxy(130,i*35+80,'......................');
if topten[i].summa =0 then outtextxy(370,i*35+80,'0000000');
end;
getKeyEvent(event);
Case event.what of
     evKeyDown: case Event.CharCode of
                    #27               : valja:=true;
                    'A'..'Z','a'..'z',
                    '&','.',',',' '   : Begin
                                        nimisisse:=nimisisse+Event.CharCode;
                                        setcolor(14);
                                        bar(130,u*35+85,360,u*35+120);
                                        outtextxy(130,u*35+80,nimisisse);
                                        end;
                    #8                : begin
                                        Delete(nimisisse,length(nimisisse),1);
                                        setcolor(14);
                                        bar(130,u*35+85,360,u*35+120);
                                        outtextxy(130,u*35+80,nimisisse);
                                        end;
                    end;

end;

until Event.CharCode=#13;
if nimisisse='' then nimisisse:='Stack Up';
topten[u].nimi:=nimisisse;
rewrite(highfile);
   for u:=1 to 10 do write(highfile,topten[u]);
   close(highfile);
end;
Punkte:=0;
repeat
GetKeyEvent(event);
For i:=1 to 10 do
begin
str(topten[i].summa,ajutine);
setcolor(ggg);
ggg:=ggg+1;
if ggg=15 then ggg:=9;
outtextxy(225,40,'High Scores');
if topten[i].nimi >'' then outtextxy(130,i*35+80,topten[i].nimi);
if topten[i].summa >0 then outtextxy(370,i*35+80,ajutine);
if (topten[i].nimi='') and(olemas=false)then outtextxy(130,i*35+80,'......................');
if (topten[i].nimi='') and(olemas=true)and(i<>u)then outtextxy(130,i*35+80,'......................');
if topten[i].summa =0 then outtextxy(370,i*35+80,'0000000');
end;
Case event.what of
     evKeyDown: case Event.CharCode of
                'A'..'Z','a'..'z','0'..'9',#13,' ': Lope:=true;
                end;
end;
until Lope;
lope:=false;
nimisisse:='';
end;
(****************************************************************************)
Procedure NaitaHighi;
label veelkord;
Begin
veelkord:
assign(highfile,'stack_up.hig');
{$I-}
reset(highfile);
{$I+}
if IOresult <> 0 then
   begin
   rewrite(highfile);
   for u:=1 to 10 do write(highfile,topten[u]);
   close(highfile);
   goto veelkord;
   end;
for u:=1 to 10 do read(highfile,topten[u]);
ClearDevice;
SetTextStyle(1, 0, 0);
ggg:=9;
repeat
For i:=1 to 10 do
begin
str(topten[i].summa,ajutine);
setcolor(ggg);
ggg:=ggg+1;
if ggg=15 then ggg:=9;
outtextxy(225,40,'High Scores');
if topten[i].nimi >'' then outtextxy(130,i*35+80,topten[i].nimi);
if topten[i].summa >0 then outtextxy(370,i*35+80,ajutine);
if topten[i].nimi ='' then outtextxy(130,i*35+80,'......................');
if topten[i].nimi ='' then outtextxy(130,i*35+80,'......................');
if topten[i].summa =0 then outtextxy(370,i*35+80,'0000000');
end;

GetKeyEvent(event);
Case event.what of
     evKeyDown: case Event.CharCode of
                'A'..'Z','a'..'z','0'..'9',#13,' ': Lope:=true;
                end;
end;
until Lope;
lope:=false;
close(highfile);
end;
(****************************************************************************)
Procedure MANGI;
label ohh;
Begin
cleardevice;
PanePaika;
ridu:=0;
smart:=1;
repeat
teelevel;
kontroll;
korras:=false;

l1:=true;l2:=true;l3:=true;
x1:=20;
paus:=25;
panepunkti;
repeat
l1:=true;l2:=true;l3:=true;
max1:=380;
max2:=380;
max3:=380;
k:=round(x1/20)+1;
for i:=1 to 19 do
if kus[i,k]<>0 then max1:=max1-20;
for i:=1 to 19 do
if kus[i,k+1]<>0 then max2:=max2-20;
for i:=1 to 19 do
if kus[i,k+2]<>0 then max3:=max3-20;
i:=30;
if (max3<40) or (max2<40) or (max1<40) then goto ohh;
repeat
Randomize;
kuju1:=round(random*6)+1;
kuju2:=round(random*6)+1;
kuju3:=round(random*6)+1;
until (kuju1<7)and(kuju2<7)and(kuju3<7)and(kuju1>0)and(kuju2>0)and(kuju3>0);
repeat
GetKeyEvent(event);
Case event.what of
     evNothing:begin
                     if l1=true then if i<=max1 then putimage(100+x1,i,ruut[kuju1]^,0) else if l1=true then s1;
                     if l2=true then if i<=max2 then putimage(120+x1,i,ruut[kuju2]^,0) else if l2=true then s2;
                     if l3=true then if i<=max3 then putimage(140+x1,i,ruut[kuju3]^,0) else if l3=true then s3;
                     inc(i);end;
     evKeyDown:begin
               case Event.KeyCode of
                    19200 : vasak;
                    19712 : parem;
                    {18432 : ules;}
                    20480 : paus:=2;
                end;
                case Event.CharCode of
                    '!': if l1 then begin kuju1:=kuju1+1;if kuju1>6 then kuju1:=1;end;
                    '@': if l2 then begin kuju2:=kuju2+1;if kuju2>6 then kuju2:=1;end;
                    '#': if l3 then begin kuju3:=kuju3+1;if kuju3>6 then kuju3:=1;end;
                    #27: valja:=true;
                    #32: begin
                         if(l1=true)and(l2=true)and(l3=true)then
                         begin
                         vahekuju:=kuju3;
                         kuju3:=kuju2;
                         kuju2:=kuju1;
                         kuju1:=vahekuju;
                         putimage(100+x1,i,ruut[kuju1]^,0);
                         putimage(120+x1,i,ruut[kuju2]^,0);
                         putimage(140+x1,i,ruut[kuju3]^,0);
                         end;
                         if(l1=true)and(l2=true)and(l3=false)then
                         begin
                         vahekuju:=kuju2;
                         kuju2:=kuju1;
                         kuju1:=vahekuju;
                         putimage(100+x1,i,ruut[kuju1]^,0);
                         putimage(120+x1,i,ruut[kuju2]^,0);
                         end;
                         if(l1=true)and(l3=true)and(l2=false)then
                         begin
                         vahekuju:=kuju3;
                         kuju3:=kuju1;
                         kuju1:=vahekuju;
                         putimage(100+x1,i,ruut[kuju1]^,0);
                         putimage(140+x1,i,ruut[kuju3]^,0);
                         end;
                         if(l2=true)and(l3=true)and(l1=false)then
                         begin
                         vahekuju:=kuju3;
                         kuju3:=kuju2;
                         kuju2:=vahekuju;
                         putimage(120+x1,i,ruut[kuju2]^,0);
                         putimage(140+x1,i,ruut[kuju3]^,0);
                         end;
                         end;
                    'p','P': begin
                             getimage(100,40,300,400,ruut[32]^);
                             putimage(100,20,ruut[33]^,0);

                             repeat until keypressed;
                             shit:=readkey;
                             putimage(100,40,ruut[32]^,0);
                             end;
                    end;
                    end;

           end;
event.what:=evNothing;
delay(paus);
until (korras) or (valja);
paus:=vahene;
kontroll;
korras:=false;
until (Valja)or(ridu>=lubatud[level]);
level:= level+1;
if 99/level=round(99/level) then vahene:=vahene-1;
ridu:=0;
until Valja;
Ohh:
mang_on_labi;
PiiluPunkti;
valja:=false;
end;
(********************************************************************)
Procedure Tee(veel,varv:integer);
begin
setcolor(varv);
SetLineStyle(0,0,1);
circle(165,200+veel*40-40,2);
circle(435,200+veel*40-40,2);
circle(165,240+veel*40-40,2);
circle(435,240+veel*40-40,2);
if varv>0 then setcolor(varv-1) else setcolor(0);
line(168,200+veel*40-40,432,200+veel*40-40);
line(168,240+veel*40-40,432,240+veel*40-40);
line(165,203+veel*40-40,165,237+veel*40-40);
line(435,203+veel*40-40,435,237+veel*40-40);
end;
(********************************************************************)
Procedure Pull;
Begin

i:=i+1;if i=1301 then i:=1;
putimage(290+round(210*cos(i      /650*pi)),round(250+110*sin(i/650*pi)),ruut[1]^,0);
putimage(290+round(210*cos((i-216)/650*pi)),round(250+110*sin((i-216)/650*pi)),ruut[2]^,0);
putimage(290+round(210*cos((i-432)/650*pi)),round(250+110*sin((i-432)/650*pi)),ruut[3]^,0);
putimage(290+round(210*cos((i-650)/650*pi)),round(250+110*sin((i-650)/650*pi)),ruut[4]^,0);
putimage(290+round(210*cos((i-866)/650*pi)),round(250+110*sin((i-866)/650*pi)),ruut[5]^,0);
putimage(290+round(210*cos((i-1092)/650*pi)),round(250+110*sin((i-1092)/650*pi)),ruut[6]^,0);

u:=u-1;if u=0 then u:=1601;
putimage(290+round(250*cos(u    /800*pi)),round(250+150*sin(u/800*pi)),ruut[1]^,0);
putimage(290+round(250*cos((u-266)/800*pi)),round(250+150*sin((u-266)/800*pi)),ruut[2]^,0);
putimage(290+round(250*cos((u-532)/800*pi)),round(250+150*sin((u-532)/800*pi)),ruut[3]^,0);
putimage(290+round(250*cos((u-800)/800*pi)),round(250+150*sin((u-800)/800*pi)),ruut[4]^,0);
putimage(290+round(250*cos((u-1066)/800*pi)),round(250+150*sin((u-1066)/800*pi)),ruut[5]^,0);
putimage(290+round(250*cos((u-1332)/800*pi)),round(250+150*sin((u-1332)/800*pi)),ruut[6]^,0);

End;
(********************************************************************)
Procedure PullX;
Begin
For Pulla:=1 to 140 do
    begin
    setcolor(15);
    line(162+pulla,198,162+pulla,320);
    line(442-pulla,198,442-pulla,320);
    setcolor(0);
    line(162+pulla-1,198,162+pulla-1,320);
    line(442-pulla+1,198,442-pulla+1,320);
    delay(10);
    end;
    line(162+pulla,198,162+pulla,320);
    line(442-pulla,198,442-pulla,320);

for pulla:=1 to 250 do
begin
if pulla<211 then
   putimage(290+round(Pulla*cos( 1      /650*pi)),round(250+round(Pulla*110/210)*sin( 1      /650*pi)),ruut[1]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((1-216) /650*pi)),round(250+round(Pulla*110/210)*sin((1-216) /650*pi)),ruut[2]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((1-432) /650*pi)),round(250+round(Pulla*110/210)*sin((1-432) /650*pi)),ruut[3]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((1-650) /650*pi)),round(250+round(Pulla*110/210)*sin((1-650) /650*pi)),ruut[4]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((1-866) /650*pi)),round(250+round(Pulla*110/210)*sin((1-866) /650*pi)),ruut[5]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((1-1092)/650*pi)),round(250+round(Pulla*110/210)*sin((1-1092)/650*pi)),ruut[6]^,0);

putimage(290+round(pulla*cos( 930      /800*pi)),round(250+round(pulla*150/250)*sin( 930      /800*pi)),ruut[1]^,0);
putimage(290+round(pulla*cos((930-266) /800*pi)),round(250+round(pulla*150/250)*sin((930-266) /800*pi)),ruut[2]^,0);
putimage(290+round(pulla*cos((930-532) /800*pi)),round(250+round(pulla*150/250)*sin((930-532) /800*pi)),ruut[3]^,0);
putimage(290+round(pulla*cos((930-800) /800*pi)),round(250+round(pulla*150/250)*sin((930-800) /800*pi)),ruut[4]^,0);
putimage(290+round(pulla*cos((930-1066)/800*pi)),round(250+round(pulla*150/250)*sin((930-1066)/800*pi)),ruut[5]^,0);
putimage(290+round(pulla*cos((930-1332)/800*pi)),round(250+round(pulla*150/250)*sin((930-1332)/800*pi)),ruut[6]^,0);
end;
i:=0;
u:=930;
setcolor(7);
Outtextxy(219,199,'New Game');
setcolor(14);
Outtextxy(220,200,'New Game');
setcolor(7);
Outtextxy(209,239,'High Scores');
setcolor(11);
Outtextxy(210,240,'High Scores');
setcolor(7);
Outtextxy(179,279,'Back To Reality');
setcolor(13);
Outtextxy(180,280,'Back To Reality');
Veel:=1;
tee(veel,9);
End;
(********************************************************************)
Procedure PullY;
Begin
For Pulla:=1 to 140 do
    begin
    setcolor(15);
    line(162+pulla,198,162+pulla,320);
    line(442-pulla,198,442-pulla,320);
    setcolor(0);
    line(162+pulla-1,198,162+pulla-1,320);
    line(442-pulla+1,198,442-pulla+1,320);
    delay(10);
    end;
    line(162+pulla,198,162+pulla,320);
    line(442-pulla,198,442-pulla,320);

for pulla:=250 downto 1 do
begin
if pulla<211 then
   putimage(290+round(Pulla*cos( i      /650*pi)),round(250+round(Pulla*110/210)*sin( i      /650*pi)),ruut[1]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((i-216) /650*pi)),round(250+round(Pulla*110/210)*sin((i-216) /650*pi)),ruut[2]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((i-432) /650*pi)),round(250+round(Pulla*110/210)*sin((i-432) /650*pi)),ruut[3]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((i-650) /650*pi)),round(250+round(Pulla*110/210)*sin((i-650) /650*pi)),ruut[4]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((i-866) /650*pi)),round(250+round(Pulla*110/210)*sin((i-866) /650*pi)),ruut[5]^,0);
if pulla<211 then
   putimage(290+round(Pulla*cos((i-1092)/650*pi)),round(250+round(Pulla*110/210)*sin((i-1092)/650*pi)),ruut[6]^,0);

putimage(290+round(pulla*cos( u      /800*pi)),round(250+round(pulla*150/250)*sin( u      /800*pi)),ruut[1]^,0);
putimage(290+round(pulla*cos((u-266) /800*pi)),round(250+round(pulla*150/250)*sin((u-266) /800*pi)),ruut[2]^,0);
putimage(290+round(pulla*cos((u-532) /800*pi)),round(250+round(pulla*150/250)*sin((u-532) /800*pi)),ruut[3]^,0);
putimage(290+round(pulla*cos((u-800) /800*pi)),round(250+round(pulla*150/250)*sin((u-800) /800*pi)),ruut[4]^,0);
putimage(290+round(pulla*cos((u-1066)/800*pi)),round(250+round(pulla*150/250)*sin((u-1066)/800*pi)),ruut[5]^,0);
putimage(290+round(pulla*cos((u-1332)/800*pi)),round(250+round(pulla*150/250)*sin((u-1332)/800*pi)),ruut[6]^,0);
end;
putimage(290+round(pulla*cos((930-1332)/800*pi)),round(250+round(pulla*150/250)*sin((930-1332)/800*pi)),ruut[31]^,0);
i:=0;
u:=930;
setcolor(7);
Outtextxy(219,199,'New Game');
setcolor(14);
Outtextxy(220,200,'New Game');
setcolor(7);
Outtextxy(209,239,'High Scores');
setcolor(11);
Outtextxy(210,240,'High Scores');
setcolor(7);
Outtextxy(179,279,'Back To Reality');
setcolor(13);
Outtextxy(180,280,'Back To Reality');
Veel:=1;
tee(veel,9);
End;
(********************************************************************)

Procedure esm;
label hey,alusta,jalle_sina,getout,nh;
begin
jalle_sina:
ClearDevice;
SetTextStyle(1, 0, 4);
for u:=500 downto 50 do
begin
GetKeyEvent(event);
Case event.what of
     evKeyDown: if Event.CharCode<>''then
     begin
     ClearDevice;
     goto hey;
     end;
end;
putimage(170,u,stackup^,0);
end;
hey:
putimage(170,50,stackup^,0);
setcolor(7);
Outtextxy(219,199,'New Game');
setcolor(14);
Outtextxy(220,200,'New Game');
setcolor(7);
Outtextxy(209,239,'High Scores');
setcolor(11);
Outtextxy(210,240,'High Scores');
setcolor(7);
Outtextxy(179,279,'Back To Reality');
setcolor(13);
Outtextxy(180,280,'Back To Reality');
Veel:=1;
tee(veel,9);
GetTime(Hour, Minute, Second, Sec100);
repeat
GetKeyEvent(event);
Case event.what of
     evKeyDown: case Event.KeyCode of
                    18432 : {ules}
                            begin
                            if veel=1 then
                            begin tee(veel,0);veel:=3;tee(veel,9);end
                            else
                            begin
                            tee(veel,0);
                            veel:=veel-1;
                            tee(veel,9);
                            end;
                            end;
                    20480 : {alla}
                            begin
                            if veel=3 then
                            begin tee(veel,0);veel:=1;tee(veel,9);end
                            else
                            begin
                            tee(veel,0);
                            veel:=veel+1;
                            tee(veel,9);
                            end;
                            end;
                    7181:   {ENTER}
                            begin;
                            if veel=1 then goto Alusta;
                            if veel=2 then goto nh;
                            if veel=3 then goto GetOut;
                            end;

                end;
end;
GetTime(Hour, Minute, Second1, Sec100);
Case event.what of
     evKeyDown: case Event.CharCode of 'H':if HakkaPullima=true then HakkaPullima:=false
                                           else
                                           begin
                                           Pullx;
                                           HakkaPullima:=true;end;end;end;
if HakkaPullima=false then if Second1>second+30 then
                      begin
                      HakkaPullima:=true;
                      Pullx;
                      end;
If HakkaPullima Then Pull;
if (Keypressed)and(HakkaPullima)then begin HakkaPullima:=false;PullY;GetTime(Hour, Minute, Second, Sec100);end
until Exit_To_Dos;
alusta:
level:=1;
vahene:=25;
Mangi;
goto jalle_sina;
nh:
naitahighi;
goto jalle_sina;
getout:
CloseGraph;
gotoxy(1,1);
writeln('STACK UP ver. 3.666 PRO ');
writeln('Thanks For Playing  !!!');
writeln('UMMI''95');
halt;
end;
(********************************************************************)
Begin
kgb;
level:=1;
punkte:=0;
lubatud[1]:=25;
for u:= 2 to 99 do lubatud[u]:=lubatud[u-1]+3;
for u:= 1 to 10 do begin topten[u].nimi:='';topten[u].summa:=0 end;
topten[1].nimi:='UMMI';
topten[1].summa:=99999;
teeasjad;
esm;
end.